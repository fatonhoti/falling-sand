#version 460

layout(local_size_x = 1, local_size_y = 1) in;

layout(binding = 0, rgba32f) uniform image2D currentState;
layout(binding = 1, rgba32f) uniform image2D nextState;

uniform int nof_cols; // Number of columns in the grid
uniform int nof_rows; // Number of rows in the grid
uniform int cell_size; // Size of each cell

bool isEqual(const float a, const float b);
bool isBlack(const vec4 color);
void setPixels(ivec2 topleft, vec4 color);
void setPixels(ivec2 topLeft1, vec4 color1, ivec2 topLeft2, vec4 color2);

void main() {
    ivec2 pixelCoord = ivec2(gl_GlobalInvocationID.xy);
    pixelCoord.y = (nof_rows - 1) - pixelCoord.y; // We want to start at top-left, so flip y-axis
    ivec2 topLeftPixel = pixelCoord * cell_size;
    topLeftPixel.y += (cell_size - 1);

    vec4 currentColor = imageLoad(currentState, topLeftPixel);

    // Skip empty cells
    if (isBlack(currentColor)) {
        return;
    }

    // Check if the cell is on the bottom row
    if (topLeftPixel.y - (cell_size - 1) < cell_size) {
        // Keep the cell at the bottom
        setPixels(topLeftPixel, currentColor);
        return;
    }

    // ------------------------------------------------------------------------------------
    // NOTE: ivec(0, -1) used because OpenGL has (0, 0) in bottom left => Y grows upwards,
    // but I am expecting (0, 0) to be top left => Y grows downwards.
    // ------------------------------------------------------------------------------------

    // Try to move the cell down
    ivec2 southTopLeftPixel = topLeftPixel + cell_size * ivec2(0, -1);
    vec4 southColor = imageLoad(currentState, southTopLeftPixel);

    if (isBlack(southColor)) {
        setPixels(southTopLeftPixel, currentColor, topLeftPixel, vec4(0.0));
        return;
    }

    // Couldn't move down, try to move left or right
    int dir = (int(mod(float(gl_GlobalInvocationID.x + gl_GlobalInvocationID.y), 2.0)) * 2) - 1; // Randomly choose -1 or 1
    ivec2 lateralTopLeftPixel = topLeftPixel + cell_size * ivec2(dir, -1);

    if (lateralTopLeftPixel.x >= 0 && (lateralTopLeftPixel.x + (cell_size - 1)) < (nof_cols * cell_size)) {
        vec4 lateralColor = imageLoad(currentState, lateralTopLeftPixel);
        if (isBlack(lateralColor)) {
            setPixels(lateralTopLeftPixel, currentColor, topLeftPixel, vec4(0.0));
            return;
        }
    }

    // No movement possible, stay in place
    setPixels(topLeftPixel, currentColor);
}


bool isEqual(const float a, const float b) {
    float epsilon = 0.001;
    return abs(a - b) < epsilon;
}

bool isBlack(const vec4 color) {
    return isEqual(color.r, 0.0f) && isEqual(color.g, 0.0f) && isEqual(color.b, 0.0f);
}

void setPixels(ivec2 topleft, vec4 color) {
    for (int y = 0; y < cell_size; ++y)
        for (int x = 0; x < cell_size; ++x)
            imageStore(nextState, topleft + ivec2(x, -y), color);
    return;
}

void setPixels(ivec2 topLeft1, vec4 color1, ivec2 topLeft2, vec4 color2) {
    for (int y = 0; y < cell_size; ++y) {
        for (int x = 0; x < cell_size; ++x) {
            imageStore(nextState, topLeft1 + ivec2(x, -y), color1);
            imageStore(nextState, topLeft2 + ivec2(x, -y), color2);
        }
    }
    return;
}